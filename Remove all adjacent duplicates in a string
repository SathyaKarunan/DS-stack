1047. Remove All Adjacent Duplicates In String

Question:
You are given a string s consisting of lowercase English letters. A duplicate removal consists of choosing two adjacent and equal letters and removing them.

We repeatedly make duplicate removals on s until we no longer can.

Return the final string after all such duplicate removals have been made. It can be proven that the answer is unique.

 

Example 1:

Input: s = "abbaca"
Output: "ca"
Explanation: 
For example, in "abbaca" we could remove "bb" since the letters are adjacent and equal, and this is the only possible move.  The result of this move is that the string is "aaca", of which only "aa" is possible, so the final string is "ca".
Example 2:

Input: s = "azxxzy"
Output: "ay"
 

Constraints:

1 <= s.length <= 105
s consists of lowercase English letters.

Approach:
1)Use string like a stack to store the ans
2)if last char in ans string is similar to current character in given string,then pop the last element from ans string
3)Else add it to the resultant string

Code:

class Solution {
public:
    string removeDuplicates(string s) {
    int n=s.size();
    string res="";
    for(int i=0;i<n;i++){
    if(!res.empty()&&res.back()==s[i])res.pop_back();
    else res.push_back(s[i]);
        }
    return res;
    }
};
