You are given a string s and an integer k, a k duplicate removal consists of choosing k adjacent and equal letters from s and removing them, causing the left and the right side of the deleted substring to concatenate together.

We repeatedly make k duplicate removals on s until we no longer can.

Return the final string after all such duplicate removals have been made. It is guaranteed that the answer is unique.

 

Example 1:

Input: s = "abcd", k = 2
Output: "abcd"
Explanation: There's nothing to delete.
Example 2:

Input: s = "deeedbbcccbdaa", k = 3
Output: "aa"
Explanation: 
First delete "eee" and "ccc", get "ddbbbdaa"
Then delete "bbb", get "dddaa"
Finally delete "ddd", get "aa"
Example 3:

Input: s = "pbbcggttciiippooaais", k = 2
Output: "ps"
 

Constraints:

1 <= s.length <= 105
2 <= k <= 104
s only contains lowercase English letters.

Approach:
1)Have a stack/vector to store the characters and their count
2)If top of stack and currently traversed character is same and both added gives length of k pop that.
3)If length is not k,just increment that
4)If two characters are different,then push element with count into the stack
5)Finally traverse the stack,and append the remaining char to the resultant string

Code:

class Solution {
public:
    string removeDuplicates(string s, int k) {
    
    string res;
    vector<pair<char,int>>t;
    for(char c:s){
    if(t.empty()||t.back().first!=c){
        t.push_back({c,1});
    }
    else if(!t.empty()&&++t.back().second==k)t.pop_back();
    }
    
    
    for(auto c:t){
     res.append(c.second,c.first);
     
    } 
    return res;
    }
};
